// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(portalFFI)
import portalFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_portal_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_portal_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol DebugMessageProtocol : AnyObject {
    
}
public class DebugMessage:
    DebugMessageProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_portal_fn_clone_debugmessage(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_portal_fn_free_debugmessage(pointer, $0) }
    }

    

    
    

}

public struct FfiConverterTypeDebugMessage: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DebugMessage

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DebugMessage {
        return DebugMessage(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DebugMessage) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DebugMessage {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DebugMessage, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeDebugMessage_lift(_ pointer: UnsafeMutableRawPointer) throws -> DebugMessage {
    return try FfiConverterTypeDebugMessage.lift(pointer)
}

public func FfiConverterTypeDebugMessage_lower(_ value: DebugMessage) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDebugMessage.lower(value)
}




public protocol PortalSdkProtocol : AnyObject {
    
    func debugMsg() async throws  -> DebugMessage
    
    func displayAddress(index: UInt32) async throws  -> Address
    
    func generateMnemonic(numWords: GenerateMnemonicWords, network: Network, password: String?) async throws 
    
    func getStatus() async throws  -> CardStatus
    
    func incomingData(msgIndex: UInt64, data: Data) async throws 
    
    func newTag() async throws 
    
    func poll() async throws  -> NfcOut
    
    func publicDescriptors() async throws  -> Descriptors
    
    func restoreMnemonic(mnemonic: String, network: Network, password: String?) async throws 
    
    func resume() async throws 
    
    func signPsbt(psbt: String) async throws  -> String
    
    func unlock(password: String) async throws 
    
    func updateFirmware(binary: Data) async throws 
    
}
public class PortalSdk:
    PortalSdkProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_portal_fn_clone_portalsdk(self.pointer, $0) }
    }
    public convenience init(useFastOps: Bool)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_portal_fn_constructor_portalsdk_new(
        FfiConverterBool.lower(useFastOps),$0)
})
    }

    deinit {
        try! rustCall { uniffi_portal_fn_free_portalsdk(pointer, $0) }
    }

    

    
    
    public func debugMsg() async throws  -> DebugMessage {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_debug_msg(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_pointer,
            completeFunc: ffi_portal_rust_future_complete_pointer,
            freeFunc: ffi_portal_rust_future_free_pointer,
            liftFunc: FfiConverterTypeDebugMessage.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func displayAddress(index: UInt32) async throws  -> Address {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_display_address(
                    self.uniffiClonePointer(),
                    FfiConverterUInt32.lower(index)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_rust_buffer,
            completeFunc: ffi_portal_rust_future_complete_rust_buffer,
            freeFunc: ffi_portal_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAddress.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func generateMnemonic(numWords: GenerateMnemonicWords, network: Network, password: String?) async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_generate_mnemonic(
                    self.uniffiClonePointer(),
                    FfiConverterTypeGenerateMnemonicWords.lower(numWords),
                    FfiConverterTypeNetwork.lower(network),
                    FfiConverterOptionString.lower(password)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func getStatus() async throws  -> CardStatus {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_get_status(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_rust_buffer,
            completeFunc: ffi_portal_rust_future_complete_rust_buffer,
            freeFunc: ffi_portal_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeCardStatus.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func incomingData(msgIndex: UInt64, data: Data) async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_incoming_data(
                    self.uniffiClonePointer(),
                    FfiConverterUInt64.lower(msgIndex),
                    FfiConverterData.lower(data)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func newTag() async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_new_tag(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func poll() async throws  -> NfcOut {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_poll(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_rust_buffer,
            completeFunc: ffi_portal_rust_future_complete_rust_buffer,
            freeFunc: ffi_portal_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeNfcOut.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func publicDescriptors() async throws  -> Descriptors {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_public_descriptors(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_rust_buffer,
            completeFunc: ffi_portal_rust_future_complete_rust_buffer,
            freeFunc: ffi_portal_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDescriptors.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func restoreMnemonic(mnemonic: String, network: Network, password: String?) async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_restore_mnemonic(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(mnemonic),
                    FfiConverterTypeNetwork.lower(network),
                    FfiConverterOptionString.lower(password)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func resume() async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_resume(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func signPsbt(psbt: String) async throws  -> String {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_sign_psbt(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(psbt)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_rust_buffer,
            completeFunc: ffi_portal_rust_future_complete_rust_buffer,
            freeFunc: ffi_portal_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func unlock(password: String) async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_unlock(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(password)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    
    public func updateFirmware(binary: Data) async throws  {
        return try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_portal_fn_method_portalsdk_update_firmware(
                    self.uniffiClonePointer(),
                    FfiConverterData.lower(binary)
                )
            },
            pollFunc: ffi_portal_rust_future_poll_void,
            completeFunc: ffi_portal_rust_future_complete_void,
            freeFunc: ffi_portal_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeSdkError.lift
        )
    }

    

}

public struct FfiConverterTypePortalSdk: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PortalSdk

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PortalSdk {
        return PortalSdk(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PortalSdk) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PortalSdk {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PortalSdk, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypePortalSdk_lift(_ pointer: UnsafeMutableRawPointer) throws -> PortalSdk {
    return try FfiConverterTypePortalSdk.lift(pointer)
}

public func FfiConverterTypePortalSdk_lower(_ value: PortalSdk) -> UnsafeMutableRawPointer {
    return FfiConverterTypePortalSdk.lower(value)
}


public struct CardStatus {
    public var initialized: Bool
    public var unverified: Bool?
    public var unlocked: Bool
    public var network: Network?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        initialized: Bool, 
        unverified: Bool?, 
        unlocked: Bool, 
        network: Network?) {
        self.initialized = initialized
        self.unverified = unverified
        self.unlocked = unlocked
        self.network = network
    }
}


extension CardStatus: Equatable, Hashable {
    public static func ==(lhs: CardStatus, rhs: CardStatus) -> Bool {
        if lhs.initialized != rhs.initialized {
            return false
        }
        if lhs.unverified != rhs.unverified {
            return false
        }
        if lhs.unlocked != rhs.unlocked {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(initialized)
        hasher.combine(unverified)
        hasher.combine(unlocked)
        hasher.combine(network)
    }
}


public struct FfiConverterTypeCardStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CardStatus {
        return
            try CardStatus(
                initialized: FfiConverterBool.read(from: &buf), 
                unverified: FfiConverterOptionBool.read(from: &buf), 
                unlocked: FfiConverterBool.read(from: &buf), 
                network: FfiConverterOptionTypeNetwork.read(from: &buf)
        )
    }

    public static func write(_ value: CardStatus, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.initialized, into: &buf)
        FfiConverterOptionBool.write(value.unverified, into: &buf)
        FfiConverterBool.write(value.unlocked, into: &buf)
        FfiConverterOptionTypeNetwork.write(value.network, into: &buf)
    }
}


public func FfiConverterTypeCardStatus_lift(_ buf: RustBuffer) throws -> CardStatus {
    return try FfiConverterTypeCardStatus.lift(buf)
}

public func FfiConverterTypeCardStatus_lower(_ value: CardStatus) -> RustBuffer {
    return FfiConverterTypeCardStatus.lower(value)
}


public struct Descriptors {
    public var external: String
    public var `internal`: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        external: String, 
        `internal`: String?) {
        self.external = external
        self.`internal` = `internal`
    }
}


extension Descriptors: Equatable, Hashable {
    public static func ==(lhs: Descriptors, rhs: Descriptors) -> Bool {
        if lhs.external != rhs.external {
            return false
        }
        if lhs.`internal` != rhs.`internal` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(external)
        hasher.combine(`internal`)
    }
}


public struct FfiConverterTypeDescriptors: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Descriptors {
        return
            try Descriptors(
                external: FfiConverterString.read(from: &buf), 
                internal: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: Descriptors, into buf: inout [UInt8]) {
        FfiConverterString.write(value.external, into: &buf)
        FfiConverterOptionString.write(value.`internal`, into: &buf)
    }
}


public func FfiConverterTypeDescriptors_lift(_ buf: RustBuffer) throws -> Descriptors {
    return try FfiConverterTypeDescriptors.lift(buf)
}

public func FfiConverterTypeDescriptors_lower(_ value: Descriptors) -> RustBuffer {
    return FfiConverterTypeDescriptors.lower(value)
}


public struct NfcOut {
    public var msgIndex: UInt64
    public var data: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        msgIndex: UInt64, 
        data: Data) {
        self.msgIndex = msgIndex
        self.data = data
    }
}


extension NfcOut: Equatable, Hashable {
    public static func ==(lhs: NfcOut, rhs: NfcOut) -> Bool {
        if lhs.msgIndex != rhs.msgIndex {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(msgIndex)
        hasher.combine(data)
    }
}


public struct FfiConverterTypeNfcOut: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NfcOut {
        return
            try NfcOut(
                msgIndex: FfiConverterUInt64.read(from: &buf), 
                data: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: NfcOut, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.msgIndex, into: &buf)
        FfiConverterData.write(value.data, into: &buf)
    }
}


public func FfiConverterTypeNfcOut_lift(_ buf: RustBuffer) throws -> NfcOut {
    return try FfiConverterTypeNfcOut.lift(buf)
}

public func FfiConverterTypeNfcOut_lower(_ value: NfcOut) -> RustBuffer {
    return FfiConverterTypeNfcOut.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum GenerateMnemonicWords {
    
    case words12
    case words24
}

public struct FfiConverterTypeGenerateMnemonicWords: FfiConverterRustBuffer {
    typealias SwiftType = GenerateMnemonicWords

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GenerateMnemonicWords {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .words12
        
        case 2: return .words24
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GenerateMnemonicWords, into buf: inout [UInt8]) {
        switch value {
        
        
        case .words12:
            writeInt(&buf, Int32(1))
        
        
        case .words24:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeGenerateMnemonicWords_lift(_ buf: RustBuffer) throws -> GenerateMnemonicWords {
    return try FfiConverterTypeGenerateMnemonicWords.lift(buf)
}

public func FfiConverterTypeGenerateMnemonicWords_lower(_ value: GenerateMnemonicWords) -> RustBuffer {
    return FfiConverterTypeGenerateMnemonicWords.lower(value)
}


extension GenerateMnemonicWords: Equatable, Hashable {}




public enum SdkError {

    
    
    case ChannelError
    case CommunicationError
    case DifferentUid
    case UnexpectedMessage
    case DeserializationError
    case Timeout
    case Base64
    case InvalidFirmware
    case Locked

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSdkError.lift(error)
    }
}


public struct FfiConverterTypeSdkError: FfiConverterRustBuffer {
    typealias SwiftType = SdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ChannelError
        case 2: return .CommunicationError
        case 3: return .DifferentUid
        case 4: return .UnexpectedMessage
        case 5: return .DeserializationError
        case 6: return .Timeout
        case 7: return .Base64
        case 8: return .InvalidFirmware
        case 9: return .Locked

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .ChannelError:
            writeInt(&buf, Int32(1))
        
        
        case .CommunicationError:
            writeInt(&buf, Int32(2))
        
        
        case .DifferentUid:
            writeInt(&buf, Int32(3))
        
        
        case .UnexpectedMessage:
            writeInt(&buf, Int32(4))
        
        
        case .DeserializationError:
            writeInt(&buf, Int32(5))
        
        
        case .Timeout:
            writeInt(&buf, Int32(6))
        
        
        case .Base64:
            writeInt(&buf, Int32(7))
        
        
        case .InvalidFirmware:
            writeInt(&buf, Int32(8))
        
        
        case .Locked:
            writeInt(&buf, Int32(9))
        
        }
    }
}


extension SdkError: Equatable, Hashable {}

extension SdkError: Error { }

fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNetwork.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNetwork.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Address = String
public struct FfiConverterTypeAddress: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Address {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Address, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Address {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Address) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeAddress_lift(_ value: RustBuffer) throws -> Address {
    return try FfiConverterTypeAddress.lift(value)
}

public func FfiConverterTypeAddress_lower(_ value: Address) -> RustBuffer {
    return FfiConverterTypeAddress.lower(value)
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Network = String
public struct FfiConverterTypeNetwork: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Network {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Network) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeNetwork_lift(_ value: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(value)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, @escaping UniFfiRustFutureContinuation, UnsafeMutableRawPointer) -> (),
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, uniffiFutureContinuationCallback, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
fileprivate class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        self.continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_portal_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_debug_msg() != 55827) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_display_address() != 38178) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_generate_mnemonic() != 22426) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_get_status() != 64696) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_incoming_data() != 43811) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_new_tag() != 57013) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_poll() != 64762) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_public_descriptors() != 54845) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_restore_mnemonic() != 34310) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_resume() != 61631) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_sign_psbt() != 64973) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_unlock() != 30072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_method_portalsdk_update_firmware() != 14513) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_portal_checksum_constructor_portalsdk_new() != 49139) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}